# unique overlay
- name: Render template unique-overlay.ldif
  template:
    src: roles/{{role_name}}/templates/unique-overlay.ldif
    dest: "{{ tmp_dir }}/unique-overlay.ldif"

- name: Add unique overlay
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f {{ tmp_dir }}/unique-overlay.ldif"

# memberOf
- name: Search Directory for memberof overlay
  shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b cn=config  olcOverlay=memberof"
  register: memberof_overlay

- name: Render template memberof-overlay.ldif
  template:
    src: roles/{{role_name}}/templates/memberof-overlay.ldif
    dest: "{{ tmp_dir }}/memberof-overlay.ldif"

- name: Add memberOf overlay to openldap
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f {{ tmp_dir }}/memberof-overlay.ldif"
  when: memberof_overlay.stdout == ""

# useless, memberOf also came with refint feature
# refint refint
# - name: Add refint overlay
  # command: "ldapadd -Y EXTERNAL -H ldapi:/// -f roles/{{role_name}}/files/refint_overlay.ldif"

# ppolicy schema
- name: "Check Password Policy schema on openLDAP and store the result on 'ppolicy_schema' ansible variable"
  shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b cn=schema,cn=config cn=*ppolicy dn"
  register: ppolicy_schema
  changed_when: false

- name: "Enable Password Policy Schema on OpenLDAP"
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/ppolicy.ldif"
  when: ppolicy_schema.stdout == ""

# ppolicy overlay configuration
- name: Search Directory for ppolicy overlay
  shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b cn=config  olcOverlay=ppolicy"
  register: ppolicy_overlay

- name: Render template ppolicy-overlay.ldif
  template:
    src: roles/{{role_name}}/templates/ppolicy-overlay.ldif
    dest: "{{ tmp_dir }}/ppolicy-overlay.ldif"

- name: Add ppolicy overlay to openldap
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f {{ tmp_dir }}/ppolicy-overlay.ldif"
  when: ppolicy_overlay.stdout == ""

- name: Render template ppolicy-entry.ldif
  template:
    src: roles/{{role_name}}/templates/ppolicy-entry.ldif
    dest: "{{ tmp_dir }}/ppolicy-entry.ldif"

- name: Add ppolicy entry
  command: "ldapadd -x -D 'cn=admin,{{ ldap_basedc }}' -w {{ ldap_pw }} -f {{ tmp_dir }}/ppolicy-entry.ldif"
  when: ppolicy_overlay.stdout == ""

# pw-sha2 overlay for SHA512 support
- name: Render template pw-sha2 overlay for SHA256 support to openldap
  template:
    src: roles/{{role_name}}/templates/pw-sha2.ldif
    dest: "{{ tmp_dir }}/pw-sha2.ldif"

- name: Add pw-sha2 overlay for SHA256 support to openldap
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f {{ tmp_dir }}/pw-sha2.ldif"
  # when: pwsha2.stdout == ""

# - name: Search Directory for pw-sha2 overlay
  # shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b cn=config  olcModuleLoad=pw-sha2"
  # register: pwsha2

- name: "Set default password encoding: {{ ldap_default_passwd_enc }}"
  shell:
    cmd: |
      ldapmodify -Y EXTERNAL -H ldapi:/// <<EOF
      dn: olcDatabase={-1}frontend,cn=config
      replace: olcPasswordHash
      olcPasswordHash: {{ ldap_default_passwd_enc }}
      EOF

# monitor overlay
- name: Hashing Monitor password
  shell: "slappasswd -s {{ ldap_monitor_pw }}"
  register: ldap_monitor_pw_hash

- name: Render template monitor_backend.ldif
  template:
    src: roles/{{role_name}}/templates/monitor_backend.ldif
    dest: "{{ tmp_dir }}/monitor_backend.ldif"

- name: Add Monitor user entry
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f {{ tmp_dir }}/monitor_backend.ldif"

# smbk5pwd overlay
- name: Render template smbk5pwd-overlay.ldif
  template:
    src: roles/{{role_name}}/templates/smbk5pwd-overlay.ldif
    dest: "{{ tmp_dir }}/smbk5pwd-overlay.ldif"

- name: Add smbk5pwd-overlay.ldif
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f {{ tmp_dir }}/smbk5pwd-overlay.ldif"

# syncrepl overlay
- name: Render template syncrepl-overlay.ldif
  template:
    src: roles/{{role_name}}/templates/syncrepl-overlay.ldif
    dest: "{{ tmp_dir }}/syncrepl-overlay.ldif"
  when: syncrepl_enabled == True

- name: Add syncrepl-overlay.ldif
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f {{ tmp_dir }}/syncrepl-overlay.ldif"
  when: syncrepl_enabled == True

# otherwise on replica: got search entry without Sync State control (dc=testunical,dc=it)
- name: "add the syncprov overlay to the primary DB"
  shell:
    cmd: |
      ldapmodify -Y EXTERNAL -H ldapi:/// <<EOF
      dn: olcOverlay=syncprov,olcDatabase={1}{{ ldap_backend }},cn=config
      changetype: add
      objectClass: olcOverlayConfig
      objectClass: olcSyncProvConfig
      olcOverlay: syncprov
      olcSpCheckpoint: 100 10
      EOF
  when: syncrepl_enabled == True

# accesslog overlay
- name: Create accesslog db folder
  file: path="/var/lib/ldap/accesslog" state=directory owner=openldap group=root mode=u=rwX,g=rX,o= recurse=yes

- name: Render template accesslog-overlay.ldif
  template:
    src: roles/{{role_name}}/templates/accesslog-overlay.ldif
    dest: "{{ tmp_dir }}/accesslog-overlay.ldif"
  when: accesslog_enabled == True

- name: Render template accesslog-entry.ldif
  template:
    src: roles/{{role_name}}/templates/accesslog-entry.ldif
    dest: "{{ tmp_dir }}/accesslog-entry.ldif"
  when: accesslog_enabled == True

- name: Add accesslog-overlay.ldif
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f {{ tmp_dir }}/accesslog-overlay.ldif"
  when: accesslog_enabled == True

- name: Add accesslog-entry.ldif
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f {{ tmp_dir }}/accesslog-entry.ldif"
  when: accesslog_enabled == True


# delta sync repl
- name: Render template syncrepl-entry.ldif
  template:
    src: roles/{{role_name}}/templates/syncrepl-entry.ldif
    dest: "{{ tmp_dir }}/syncrepl-entry.ldif"
  when: syncrepl_enabled == True

- name: Add syncrepl-entry.ldif
  command: "ldapadd -Y EXTERNAL -H ldapi:/// -f {{ tmp_dir }}/syncrepl-entry.ldif"
  when: syncrepl_enabled == True and accesslog_enabled == True

- name: "Set ACL for delta repl consumer to accesslog"
  shell:
    cmd: |
      ldapmodify -Y EXTERNAL -H ldapi:/// <<EOF
      dn: olcDatabase={3}mdb,cn=config
      changeType: modify
      replace: olcAccess
      olcAccess: to * by dn.children="ou=repl,{{ ldap_basedc }}" read by * break
      EOF
  when: syncrepl_enabled == True and accesslog_enabled == True

# to be fixed
# - name: "Set limitless search for repl users on primary db"
  # shell:
    # cmd: |
      # ldapmodify -Y EXTERNAL -H ldapi:/// <<EOF
      # dn: olcDatabase={1}{{ ldap_backend }},cn=config
      # changetype: modify
      # replace: olcLimit
      # olcLimit: dn.children="ou=repl,{{ ldap_basedc }}" time.soft=unlimited time.hard=unlimited size.soft=unlimited size.hard=unlimited
      # EOF
  # when: syncrepl_enabled == True

# - name: "Set limitless search for repl users on accesslog"
  # shell:
    # cmd: |
      # ldapmodify -Y EXTERNAL -H ldapi:/// <<EOF
      # dn: olcDatabase={3}{{ ldap_backend }},cn=config
      # changetype: modify
      # replace: olcLimit
      # olcLimit: dn.children="ou=repl,{{ ldap_basedc }}" time.soft=unlimited time.hard=unlimited size.soft=unlimited size.hard=unlimited
      # EOF
  # when: syncrepl_enabled == True and accesslog_enabled == True
